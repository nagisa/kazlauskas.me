<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="590" onload="init(evt)" viewBox="0 0 1200 590" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="transparent" offset="5%"/><stop stop-color="transparent" offset="95%"/></linearGradient></defs><style type="text/css">text { font-family:"Source Code Pro",monospace; font-size:14px; fill:rgb(253,246,227); }
#search { cursor:pointer; fill:#268bd2; text-anchor:end; }
#details { fill:#657b83; font-size: 1em; }
#unzoom { cursor:pointer; fill:#268bd2; }
#matched { text-anchor:end; fill:#586e75; }
#frames > g > rect { stroke-width:1; stroke:#eee8d5; }
#frames > g:hover > rect { fill: #268bd2; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
@media (prefers-color-scheme:dark){
#matched, #details { fill:#93a1a1!important; }
#frames > g > rect { stroke-width:1; stroke:#93a1a1; }
}
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 16;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(211,54,130)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="590" fill="url(#background)"/><text id="details" x="10" y="575.00"> </text><text id="unzoom" class="hide" x="10" y="21.00">Reset Zoom</text><text id="search" x="1190" y="21.00">Search</text><text id="matched" x="1190" y="575.00"> </text><svg id="frames" x="10" width="1180" total_samples="14976"><g><title>mmap_benchmarks::execute_module (371 samples, 2.48%)</title><rect x="0.7278%" y="442" width="2.4773%" height="22" fill="rgb(88,110,117)" fg:x="109" fg:w="371"/><text x="0.9778%" y="457.00">m..</text></g><g><title>cpumask_next (386 samples, 2.58%)</title><rect x="37.0860%" y="58" width="2.5775%" height="22" fill="rgb(0,43,54)" fg:x="5554" fg:w="386"/><text x="37.3360%" y="73.00">c..</text></g><g><title>_find_next_bit (306 samples, 2.04%)</title><rect x="37.6202%" y="34" width="2.0433%" height="22" fill="rgb(0,43,54)" fg:x="5634" fg:w="306"/><text x="37.8702%" y="49.00"></text></g><g><title>change_protection (4,385 samples, 29.28%)</title><rect x="12.7671%" y="154" width="29.2802%" height="22" fill="rgb(0,43,54)" fg:x="1912" fg:w="4385"/><text x="13.0171%" y="169.00">change_protection</text></g><g><title>flush_tlb_mm_range (3,320 samples, 22.17%)</title><rect x="19.8785%" y="130" width="22.1688%" height="22" fill="rgb(0,43,54)" fg:x="2977" fg:w="3320"/><text x="20.1285%" y="145.00">flush_tlb_mm_range</text></g><g><title>on_each_cpu_cond_mask (3,052 samples, 20.38%)</title><rect x="21.6680%" y="106" width="20.3793%" height="22" fill="rgb(0,43,54)" fg:x="3245" fg:w="3052"/><text x="21.9180%" y="121.00">on_each_cpu_cond_mask</text></g><g><title>smp_call_function_many_cond (3,051 samples, 20.37%)</title><rect x="21.6747%" y="82" width="20.3726%" height="22" fill="rgb(0,43,54)" fg:x="3246" fg:w="3051"/><text x="21.9247%" y="97.00">smp_call_function_many_..</text></g><g><title>tlb_is_not_lazy (306 samples, 2.04%)</title><rect x="40.0040%" y="58" width="2.0433%" height="22" fill="rgb(0,43,54)" fg:x="5991" fg:w="306"/><text x="40.2540%" y="73.00"></text></g><g><title>d_path (393 samples, 2.62%)</title><rect x="44.8184%" y="130" width="2.6242%" height="22" fill="rgb(0,43,54)" fg:x="6712" fg:w="393"/><text x="45.0684%" y="145.00">d..</text></g><g><title>simple_dname (354 samples, 2.36%)</title><rect x="45.0788%" y="106" width="2.3638%" height="22" fill="rgb(0,43,54)" fg:x="6751" fg:w="354"/><text x="45.3288%" y="121.00">s..</text></g><g><title>kfree (363 samples, 2.42%)</title><rect x="47.4426%" y="130" width="2.4239%" height="22" fill="rgb(0,43,54)" fg:x="7105" fg:w="363"/><text x="47.6926%" y="145.00">k..</text></g><g><title>__perf_addr_filters_adjust (1,039 samples, 6.94%)</title><rect x="52.6442%" y="106" width="6.9378%" height="22" fill="rgb(0,43,54)" fg:x="7884" fg:w="1039"/><text x="52.8942%" y="121.00">__perf..</text></g><g><title>perf_iterate_ctx (1,254 samples, 8.37%)</title><rect x="51.3488%" y="130" width="8.3734%" height="22" fill="rgb(0,43,54)" fg:x="7690" fg:w="1254"/><text x="51.5988%" y="145.00">perf_ite..</text></g><g><title>__perf_event__output_id_sample (538 samples, 3.59%)</title><rect x="67.9554%" y="58" width="3.5924%" height="22" fill="rgb(0,43,54)" fg:x="10177" fg:w="538"/><text x="68.2054%" y="73.00">__..</text></g><g><title>perf_output_copy (449 samples, 3.00%)</title><rect x="68.5497%" y="34" width="2.9981%" height="22" fill="rgb(0,43,54)" fg:x="10266" fg:w="449"/><text x="68.7997%" y="49.00">p..</text></g><g><title>__perf_event_header__init_id (577 samples, 3.85%)</title><rect x="71.5478%" y="58" width="3.8528%" height="22" fill="rgb(0,43,54)" fg:x="10715" fg:w="577"/><text x="71.7978%" y="73.00">__..</text></g><g><title>perf_output_begin (310 samples, 2.07%)</title><rect x="76.9231%" y="58" width="2.0700%" height="22" fill="rgb(0,43,54)" fg:x="11520" fg:w="310"/><text x="77.1731%" y="73.00"></text></g><g><title>perf_output_copy (1,663 samples, 11.10%)</title><rect x="78.9931%" y="58" width="11.1044%" height="22" fill="rgb(0,43,54)" fg:x="11830" fg:w="1663"/><text x="79.2431%" y="73.00">perf_output_..</text></g><g><title>memcpy (964 samples, 6.44%)</title><rect x="83.6605%" y="34" width="6.4370%" height="22" fill="rgb(0,43,54)" fg:x="12529" fg:w="964"/><text x="83.9105%" y="49.00">memcpy</text></g><g><title>perf_iterate_sb (4,574 samples, 30.54%)</title><rect x="59.7222%" y="130" width="30.5422%" height="22" fill="rgb(0,43,54)" fg:x="8944" fg:w="4574"/><text x="59.9722%" y="145.00">perf_iterate_sb</text></g><g><title>perf_iterate_ctx (4,221 samples, 28.19%)</title><rect x="62.0793%" y="106" width="28.1851%" height="22" fill="rgb(0,43,54)" fg:x="9297" fg:w="4221"/><text x="62.3293%" y="121.00">perf_iterate_ctx</text></g><g><title>perf_event_mmap_output (3,736 samples, 24.95%)</title><rect x="65.3178%" y="82" width="24.9466%" height="22" fill="rgb(0,43,54)" fg:x="9782" fg:w="3736"/><text x="65.5678%" y="97.00">perf_event_mmap_output</text></g><g><title>perf_event_mmap (7,288 samples, 48.66%)</title><rect x="42.1942%" y="154" width="48.6645%" height="22" fill="rgb(0,43,54)" fg:x="6319" fg:w="7288"/><text x="42.4442%" y="169.00">perf_event_mmap</text></g><g><title>mprotect_fixup (12,199 samples, 81.46%)</title><rect x="11.7989%" y="178" width="81.4570%" height="22" fill="rgb(0,43,54)" fg:x="1767" fg:w="12199"/><text x="12.0489%" y="193.00">mprotect_fixup</text></g><g><title>security_file_mprotect (676 samples, 4.51%)</title><rect x="93.2559%" y="178" width="4.5139%" height="22" fill="rgb(0,43,54)" fg:x="13966" fg:w="676"/><text x="93.5059%" y="193.00">sec..</text></g><g><title>__x64_sys_mprotect (13,377 samples, 89.32%)</title><rect x="8.5938%" y="226" width="89.3229%" height="22" fill="rgb(0,43,54)" fg:x="1287" fg:w="13377"/><text x="8.8438%" y="241.00">__x64_sys_mprotect</text></g><g><title>do_mprotect_pkey (13,310 samples, 88.88%)</title><rect x="9.0411%" y="202" width="88.8755%" height="22" fill="rgb(0,43,54)" fg:x="1354" fg:w="13310"/><text x="9.2911%" y="217.00">do_mprotect_pkey</text></g><g><title>entry_SYSCALL_64_after_hwframe (13,689 samples, 91.41%)</title><rect x="8.4135%" y="274" width="91.4062%" height="22" fill="rgb(0,43,54)" fg:x="1260" fg:w="13689"/><text x="8.6635%" y="289.00">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (13,689 samples, 91.41%)</title><rect x="8.4135%" y="250" width="91.4062%" height="22" fill="rgb(0,43,54)" fg:x="1260" fg:w="13689"/><text x="8.6635%" y="265.00">do_syscall_64</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (14,908 samples, 99.55%)</title><rect x="0.4340%" y="490" width="99.5459%" height="22" fill="rgb(88,110,117)" fg:x="65" fg:w="14908"/><text x="0.6840%" y="505.00">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>mmap_benchmarks::main::{{closure}}::{{closure}} (14,871 samples, 99.30%)</title><rect x="0.6811%" y="466" width="99.2989%" height="22" fill="rgb(88,110,117)" fg:x="102" fg:w="14871"/><text x="0.9311%" y="481.00">mmap_benchmarks::main::{{closure}}::{{closure}}</text></g><g><title>rustix::io::mmap::mprotect (14,223 samples, 94.97%)</title><rect x="5.0080%" y="442" width="94.9720%" height="22" fill="rgb(88,110,117)" fg:x="750" fg:w="14223"/><text x="5.2580%" y="457.00">rustix::io::mmap::mprotect</text></g><g><title>rustix::imp::io::syscalls::mprotect (14,223 samples, 94.97%)</title><rect x="5.0080%" y="418" width="94.9720%" height="22" fill="rgb(88,110,117)" fg:x="750" fg:w="14223"/><text x="5.2580%" y="433.00">rustix::imp::io::syscalls::mprotect</text></g><g><title>rustix::imp::conv::ret (14,222 samples, 94.97%)</title><rect x="5.0147%" y="394" width="94.9653%" height="22" fill="rgb(88,110,117)" fg:x="751" fg:w="14222"/><text x="5.2647%" y="409.00">rustix::imp::conv::ret</text></g><g><title>rustix::imp::io::error::try_decode_void (14,222 samples, 94.97%)</title><rect x="5.0147%" y="370" width="94.9653%" height="22" fill="rgb(88,110,117)" fg:x="751" fg:w="14222"/><text x="5.2647%" y="385.00">rustix::imp::io::error::try_decode_void</text></g><g><title>rustix::imp::reg::RetReg&lt;Num&gt;::is_nonzero (14,222 samples, 94.97%)</title><rect x="5.0147%" y="346" width="94.9653%" height="22" fill="rgb(88,110,117)" fg:x="751" fg:w="14222"/><text x="5.2647%" y="361.00">rustix::imp::reg::RetReg&lt;Num&gt;::is_nonzero</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (14,222 samples, 94.97%)</title><rect x="5.0147%" y="322" width="94.9653%" height="22" fill="rgb(88,110,117)" fg:x="751" fg:w="14222"/><text x="5.2647%" y="337.00">core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (14,222 samples, 94.97%)</title><rect x="5.0147%" y="298" width="94.9653%" height="22" fill="rgb(88,110,117)" fg:x="751" fg:w="14222"/><text x="5.2647%" y="313.00">core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq</text></g><g><title>all (14,976 samples, 100%)</title><rect x="0.0000%" y="538" width="100.0000%" height="22" fill="rgb(88,110,117)" fg:x="0" fg:w="14976"/><text x="0.2500%" y="553.00"></text></g><g><title>mmap_benchmarks (14,976 samples, 100.00%)</title><rect x="0.0000%" y="514" width="100.0000%" height="22" fill="rgb(88,110,117)" fg:x="0" fg:w="14976"/><text x="0.2500%" y="529.00">mmap_benchmarks</text></g></svg></svg>