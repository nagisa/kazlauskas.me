<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="transparent" offset="5%"/><stop stop-color="transparent" offset="95%"/></linearGradient></defs><style type="text/css">text { font-family:"Source Code Pro",monospace; font-size:14px; fill:rgb(253,246,227); }
#search { cursor:pointer; fill:#268bd2; text-anchor:end; }
#details { fill:#657b83; font-size: 1em; }
#unzoom { cursor:pointer; fill:#268bd2; }
#matched { text-anchor:end; fill:#586e75; }
#frames > g > rect { stroke-width:1; stroke:#eee8d5; }
#frames > g:hover > rect { fill: #268bd2; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
@media (prefers-color-scheme:dark){
#matched, #details { fill:#93a1a1!important; }
#frames > g > rect { stroke-width:1; stroke:#93a1a1; }
}
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 16;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(211,54,130)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="details" x="10" y="551.00"> </text><text id="unzoom" class="hide" x="10" y="21.00">Reset Zoom</text><text id="search" x="1190" y="21.00">Search</text><text id="matched" x="1190" y="551.00"> </text><svg id="frames" x="10" width="1180" total_samples="16793"><g><title>lru_add_drain (536 samples, 3.19%)</title><rect x="6.2824%" y="130" width="3.1918%" height="22" fill="rgb(0,43,54)" fg:x="1055" fg:w="536"/><text x="6.5324%" y="145.00">lr..</text></g><g><title>lru_add_drain_cpu (536 samples, 3.19%)</title><rect x="6.2824%" y="106" width="3.1918%" height="22" fill="rgb(0,43,54)" fg:x="1055" fg:w="536"/><text x="6.5324%" y="121.00">lr..</text></g><g><title>__pagevec_lru_add (515 samples, 3.07%)</title><rect x="6.4074%" y="82" width="3.0668%" height="22" fill="rgb(0,43,54)" fg:x="1076" fg:w="515"/><text x="6.6574%" y="97.00">_..</text></g><g><title>flush_tlb_mm_range (737 samples, 4.39%)</title><rect x="9.8791%" y="106" width="4.3887%" height="22" fill="rgb(0,43,54)" fg:x="1659" fg:w="737"/><text x="10.1291%" y="121.00">flu..</text></g><g><title>on_each_cpu_cond_mask (603 samples, 3.59%)</title><rect x="10.6771%" y="82" width="3.5908%" height="22" fill="rgb(0,43,54)" fg:x="1793" fg:w="603"/><text x="10.9271%" y="97.00">on..</text></g><g><title>smp_call_function_many_cond (603 samples, 3.59%)</title><rect x="10.6771%" y="58" width="3.5908%" height="22" fill="rgb(0,43,54)" fg:x="1793" fg:w="603"/><text x="10.9271%" y="73.00">sm..</text></g><g><title>tlb_finish_mmu (1,662 samples, 9.90%)</title><rect x="9.4742%" y="130" width="9.8970%" height="22" fill="rgb(0,43,54)" fg:x="1591" fg:w="1662"/><text x="9.7242%" y="145.00">tlb_finish..</text></g><g><title>release_pages (774 samples, 4.61%)</title><rect x="14.7621%" y="106" width="4.6091%" height="22" fill="rgb(0,43,54)" fg:x="2479" fg:w="774"/><text x="15.0121%" y="121.00">rel..</text></g><g><title>unmap_page_range (515 samples, 3.07%)</title><rect x="19.5319%" y="106" width="3.0668%" height="22" fill="rgb(0,43,54)" fg:x="3280" fg:w="515"/><text x="19.7819%" y="121.00">u..</text></g><g><title>unmap_region (3,091 samples, 18.41%)</title><rect x="4.3768%" y="154" width="18.4065%" height="22" fill="rgb(0,43,54)" fg:x="735" fg:w="3091"/><text x="4.6268%" y="169.00">unmap_region</text></g><g><title>unmap_vmas (561 samples, 3.34%)</title><rect x="19.4426%" y="130" width="3.3407%" height="22" fill="rgb(0,43,54)" fg:x="3265" fg:w="561"/><text x="19.6926%" y="145.00">un..</text></g><g><title>__do_munmap (3,559 samples, 21.19%)</title><rect x="1.6674%" y="178" width="21.1934%" height="22" fill="rgb(0,43,54)" fg:x="280" fg:w="3559"/><text x="1.9174%" y="193.00">__do_munmap</text></g><g><title>__vm_munmap (3,599 samples, 21.43%)</title><rect x="1.5542%" y="202" width="21.4315%" height="22" fill="rgb(0,43,54)" fg:x="261" fg:w="3599"/><text x="1.8042%" y="217.00">__vm_munmap</text></g><g><title>__x64_sys_munmap (3,649 samples, 21.73%)</title><rect x="1.3875%" y="226" width="21.7293%" height="22" fill="rgb(0,43,54)" fg:x="233" fg:w="3649"/><text x="1.6375%" y="241.00">__x64_sys_munmap</text></g><g><title>entry_SYSCALL_64_after_hwframe (3,765 samples, 22.42%)</title><rect x="1.3518%" y="274" width="22.4201%" height="22" fill="rgb(0,43,54)" fg:x="227" fg:w="3765"/><text x="1.6018%" y="289.00">entry_SYSCALL_64_after_hwf..</text></g><g><title>do_syscall_64 (3,765 samples, 22.42%)</title><rect x="1.3518%" y="250" width="22.4201%" height="22" fill="rgb(0,43,54)" fg:x="227" fg:w="3765"/><text x="1.6018%" y="265.00">do_syscall_64</text></g><g><title>core::ptr::drop_in_place&lt;scopeguard::ScopeGuard&lt;(),mmap_benchmarks::main::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (3,862 samples, 23.00%)</title><rect x="0.7860%" y="418" width="22.9977%" height="22" fill="rgb(88,110,117)" fg:x="132" fg:w="3862"/><text x="1.0360%" y="433.00">core::ptr::drop_in_place&lt;sc..</text></g><g><title>&lt;scopeguard::ScopeGuard&lt;T,F,S&gt; as core::ops::drop::Drop&gt;::drop (3,862 samples, 23.00%)</title><rect x="0.7860%" y="394" width="22.9977%" height="22" fill="rgb(88,110,117)" fg:x="132" fg:w="3862"/><text x="1.0360%" y="409.00">&lt;scopeguard::ScopeGuard&lt;T,F..</text></g><g><title>mmap_benchmarks::main::{{closure}}::{{closure}}::{{closure}} (3,862 samples, 23.00%)</title><rect x="0.7860%" y="370" width="22.9977%" height="22" fill="rgb(88,110,117)" fg:x="132" fg:w="3862"/><text x="1.0360%" y="385.00">mmap_benchmarks::main::{{cl..</text></g><g><title>rustix::io::mmap::munmap (3,862 samples, 23.00%)</title><rect x="0.7860%" y="346" width="22.9977%" height="22" fill="rgb(88,110,117)" fg:x="132" fg:w="3862"/><text x="1.0360%" y="361.00">rustix::io::mmap::munmap</text></g><g><title>rustix::imp::io::syscalls::munmap (3,862 samples, 23.00%)</title><rect x="0.7860%" y="322" width="22.9977%" height="22" fill="rgb(88,110,117)" fg:x="132" fg:w="3862"/><text x="1.0360%" y="337.00">rustix::imp::io::syscalls::..</text></g><g><title>rustix::imp::arch::inline::target_arch::syscall2 (3,862 samples, 23.00%)</title><rect x="0.7860%" y="298" width="22.9977%" height="22" fill="rgb(88,110,117)" fg:x="132" fg:w="3862"/><text x="1.0360%" y="313.00">rustix::imp::arch::inline::..</text></g><g><title>get_page_from_freelist (1,478 samples, 8.80%)</title><rect x="48.4368%" y="202" width="8.8013%" height="22" fill="rgb(0,43,54)" fg:x="8134" fg:w="1478"/><text x="48.6868%" y="217.00">get_page_..</text></g><g><title>kernel_init_free_pages.part.0 (1,144 samples, 6.81%)</title><rect x="50.4258%" y="178" width="6.8124%" height="22" fill="rgb(0,43,54)" fg:x="8468" fg:w="1144"/><text x="50.6758%" y="193.00">kernel..</text></g><g><title>clear_page_rep (1,121 samples, 6.68%)</title><rect x="50.5627%" y="154" width="6.6754%" height="22" fill="rgb(0,43,54)" fg:x="8491" fg:w="1121"/><text x="50.8127%" y="169.00">clear_..</text></g><g><title>__alloc_pages (1,644 samples, 9.79%)</title><rect x="48.0021%" y="226" width="9.7898%" height="22" fill="rgb(0,43,54)" fg:x="8061" fg:w="1644"/><text x="48.2521%" y="241.00">__alloc_pa..</text></g><g><title>alloc_pages_vma (1,814 samples, 10.80%)</title><rect x="47.1030%" y="250" width="10.8021%" height="22" fill="rgb(0,43,54)" fg:x="7910" fg:w="1814"/><text x="47.3530%" y="265.00">alloc_pages..</text></g><g><title>__handle_mm_fault (3,197 samples, 19.04%)</title><rect x="40.6003%" y="274" width="19.0377%" height="22" fill="rgb(0,43,54)" fg:x="6818" fg:w="3197"/><text x="40.8503%" y="289.00">__handle_mm_fault</text></g><g><title>handle_mm_fault (3,408 samples, 20.29%)</title><rect x="39.8738%" y="298" width="20.2942%" height="22" fill="rgb(0,43,54)" fg:x="6696" fg:w="3408"/><text x="40.1238%" y="313.00">handle_mm_fault</text></g><g><title>core::intrinsics::copy_nonoverlapping (5,986 samples, 35.65%)</title><rect x="24.7246%" y="394" width="35.6458%" height="22" fill="rgb(88,110,117)" fg:x="4152" fg:w="5986"/><text x="24.9746%" y="409.00">core::intrinsics::copy_nonoverlapping</text></g><g><title>asm_exc_page_fault (5,123 samples, 30.51%)</title><rect x="29.8636%" y="370" width="30.5068%" height="22" fill="rgb(0,43,54)" fg:x="5015" fg:w="5123"/><text x="30.1136%" y="385.00">asm_exc_page_fault</text></g><g><title>exc_page_fault (5,123 samples, 30.51%)</title><rect x="29.8636%" y="346" width="30.5068%" height="22" fill="rgb(0,43,54)" fg:x="5015" fg:w="5123"/><text x="30.1136%" y="361.00">exc_page_fault</text></g><g><title>do_user_addr_fault (5,117 samples, 30.47%)</title><rect x="29.8994%" y="322" width="30.4710%" height="22" fill="rgb(0,43,54)" fg:x="5021" fg:w="5117"/><text x="30.1494%" y="337.00">do_user_addr_fault</text></g><g><title>mmap_benchmarks::write_module (5,993 samples, 35.69%)</title><rect x="24.7246%" y="418" width="35.6875%" height="22" fill="rgb(88,110,117)" fg:x="4152" fg:w="5993"/><text x="24.9746%" y="433.00">mmap_benchmarks::write_module</text></g><g><title>get_unmapped_area (426 samples, 2.54%)</title><rect x="62.6987%" y="250" width="2.5368%" height="22" fill="rgb(0,43,54)" fg:x="10529" fg:w="426"/><text x="62.9487%" y="265.00">g..</text></g><g><title>perf_output_copy (404 samples, 2.41%)</title><rect x="71.1666%" y="130" width="2.4058%" height="22" fill="rgb(0,43,54)" fg:x="11951" fg:w="404"/><text x="71.4166%" y="145.00">p..</text></g><g><title>perf_iterate_sb (1,226 samples, 7.30%)</title><rect x="66.3550%" y="202" width="7.3007%" height="22" fill="rgb(0,43,54)" fg:x="11143" fg:w="1226"/><text x="66.6050%" y="217.00">perf_it..</text></g><g><title>perf_iterate_ctx (1,130 samples, 6.73%)</title><rect x="66.9267%" y="178" width="6.7290%" height="22" fill="rgb(0,43,54)" fg:x="11239" fg:w="1130"/><text x="67.1767%" y="193.00">perf_i..</text></g><g><title>perf_event_mmap_output (956 samples, 5.69%)</title><rect x="67.9628%" y="154" width="5.6928%" height="22" fill="rgb(0,43,54)" fg:x="11413" fg:w="956"/><text x="68.2128%" y="169.00">perf_..</text></g><g><title>perf_event_mmap (1,318 samples, 7.85%)</title><rect x="65.9263%" y="226" width="7.8485%" height="22" fill="rgb(0,43,54)" fg:x="11071" fg:w="1318"/><text x="66.1763%" y="241.00">perf_ev..</text></g><g><title>do_mmap (2,350 samples, 13.99%)</title><rect x="62.3355%" y="274" width="13.9939%" height="22" fill="rgb(0,43,54)" fg:x="10468" fg:w="2350"/><text x="62.5855%" y="289.00">do_mmap</text></g><g><title>mmap_region (1,863 samples, 11.09%)</title><rect x="65.2355%" y="250" width="11.0939%" height="22" fill="rgb(0,43,54)" fg:x="10955" fg:w="1863"/><text x="65.4855%" y="265.00">mmap_region</text></g><g><title>entry_SYSCALL_64_after_hwframe (2,810 samples, 16.73%)</title><rect x="61.1028%" y="346" width="16.7332%" height="22" fill="rgb(0,43,54)" fg:x="10261" fg:w="2810"/><text x="61.3528%" y="361.00">entry_SYSCALL_64_af..</text></g><g><title>do_syscall_64 (2,810 samples, 16.73%)</title><rect x="61.1028%" y="322" width="16.7332%" height="22" fill="rgb(0,43,54)" fg:x="10261" fg:w="2810"/><text x="61.3528%" y="337.00">do_syscall_64</text></g><g><title>vm_mmap_pgoff (2,642 samples, 15.73%)</title><rect x="62.1033%" y="298" width="15.7327%" height="22" fill="rgb(0,43,54)" fg:x="10429" fg:w="2642"/><text x="62.3533%" y="313.00">vm_mmap_pgoff</text></g><g><title>rustix::io::mmap::mmap_anonymous (2,934 samples, 17.47%)</title><rect x="60.4121%" y="418" width="17.4716%" height="22" fill="rgb(88,110,117)" fg:x="10145" fg:w="2934"/><text x="60.6621%" y="433.00">rustix::io::mmap::mm..</text></g><g><title>rustix::imp::io::syscalls::mmap_anonymous (2,934 samples, 17.47%)</title><rect x="60.4121%" y="394" width="17.4716%" height="22" fill="rgb(88,110,117)" fg:x="10145" fg:w="2934"/><text x="60.6621%" y="409.00">rustix::imp::io::sys..</text></g><g><title>rustix::imp::arch::inline::target_arch::syscall6 (2,934 samples, 17.47%)</title><rect x="60.4121%" y="370" width="17.4716%" height="22" fill="rgb(88,110,117)" fg:x="10145" fg:w="2934"/><text x="60.6621%" y="385.00">rustix::imp::arch::i..</text></g><g><title>change_protection (1,080 samples, 6.43%)</title><rect x="79.7594%" y="130" width="6.4313%" height="22" fill="rgb(0,43,54)" fg:x="13394" fg:w="1080"/><text x="80.0094%" y="145.00">change..</text></g><g><title>flush_tlb_mm_range (788 samples, 4.69%)</title><rect x="81.4982%" y="106" width="4.6924%" height="22" fill="rgb(0,43,54)" fg:x="13686" fg:w="788"/><text x="81.7482%" y="121.00">flu..</text></g><g><title>on_each_cpu_cond_mask (667 samples, 3.97%)</title><rect x="82.2188%" y="82" width="3.9719%" height="22" fill="rgb(0,43,54)" fg:x="13807" fg:w="667"/><text x="82.4688%" y="97.00">on_..</text></g><g><title>smp_call_function_many_cond (664 samples, 3.95%)</title><rect x="82.2366%" y="58" width="3.9540%" height="22" fill="rgb(0,43,54)" fg:x="13810" fg:w="664"/><text x="82.4866%" y="73.00">smp..</text></g><g><title>__perf_addr_filters_adjust (548 samples, 3.26%)</title><rect x="87.6556%" y="82" width="3.2633%" height="22" fill="rgb(0,43,54)" fg:x="14720" fg:w="548"/><text x="87.9056%" y="97.00">__..</text></g><g><title>perf_iterate_ctx (645 samples, 3.84%)</title><rect x="87.1375%" y="106" width="3.8409%" height="22" fill="rgb(0,43,54)" fg:x="14633" fg:w="645"/><text x="87.3875%" y="121.00">pe..</text></g><g><title>perf_output_copy (372 samples, 2.22%)</title><rect x="95.0694%" y="34" width="2.2152%" height="22" fill="rgb(0,43,54)" fg:x="15965" fg:w="372"/><text x="95.3194%" y="49.00"></text></g><g><title>perf_iterate_sb (1,063 samples, 6.33%)</title><rect x="90.9784%" y="106" width="6.3300%" height="22" fill="rgb(0,43,54)" fg:x="15278" fg:w="1063"/><text x="91.2284%" y="121.00">perf_i..</text></g><g><title>perf_iterate_ctx (1,000 samples, 5.95%)</title><rect x="91.3535%" y="82" width="5.9549%" height="22" fill="rgb(0,43,54)" fg:x="15341" fg:w="1000"/><text x="91.6035%" y="97.00">perf_..</text></g><g><title>perf_event_mmap_output (871 samples, 5.19%)</title><rect x="92.1217%" y="58" width="5.1867%" height="22" fill="rgb(0,43,54)" fg:x="15470" fg:w="871"/><text x="92.3717%" y="73.00">perf..</text></g><g><title>perf_event_mmap (1,881 samples, 11.20%)</title><rect x="86.1907%" y="130" width="11.2011%" height="22" fill="rgb(0,43,54)" fg:x="14474" fg:w="1881"/><text x="86.4407%" y="145.00">perf_event_m..</text></g><g><title>mprotect_fixup (3,109 samples, 18.51%)</title><rect x="79.3962%" y="154" width="18.5137%" height="22" fill="rgb(0,43,54)" fg:x="13333" fg:w="3109"/><text x="79.6462%" y="169.00">mprotect_fixup</text></g><g><title>__x64_sys_mprotect (3,494 samples, 20.81%)</title><rect x="78.6161%" y="202" width="20.8063%" height="22" fill="rgb(0,43,54)" fg:x="13202" fg:w="3494"/><text x="78.8661%" y="217.00">__x64_sys_mprotect</text></g><g><title>do_mprotect_pkey (3,470 samples, 20.66%)</title><rect x="78.7590%" y="178" width="20.6634%" height="22" fill="rgb(0,43,54)" fg:x="13226" fg:w="3470"/><text x="79.0090%" y="193.00">do_mprotect_pkey</text></g><g><title>entry_SYSCALL_64_after_hwframe (3,597 samples, 21.42%)</title><rect x="78.5208%" y="250" width="21.4196%" height="22" fill="rgb(0,43,54)" fg:x="13186" fg:w="3597"/><text x="78.7708%" y="265.00">entry_SYSCALL_64_after_hw..</text></g><g><title>do_syscall_64 (3,597 samples, 21.42%)</title><rect x="78.5208%" y="226" width="21.4196%" height="22" fill="rgb(0,43,54)" fg:x="13186" fg:w="3597"/><text x="78.7708%" y="241.00">do_syscall_64</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (16,682 samples, 99.34%)</title><rect x="0.6431%" y="466" width="99.3390%" height="22" fill="rgb(88,110,117)" fg:x="108" fg:w="16682"/><text x="0.8931%" y="481.00">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>mmap_benchmarks::main::{{closure}}::{{closure}} (16,658 samples, 99.20%)</title><rect x="0.7860%" y="442" width="99.1961%" height="22" fill="rgb(88,110,117)" fg:x="132" fg:w="16658"/><text x="1.0360%" y="457.00">mmap_benchmarks::main::{{closure}}::{{closure}}</text></g><g><title>rustix::io::mmap::mprotect (3,711 samples, 22.10%)</title><rect x="77.8836%" y="418" width="22.0985%" height="22" fill="rgb(88,110,117)" fg:x="13079" fg:w="3711"/><text x="78.1336%" y="433.00">rustix::io::mmap::mprotect</text></g><g><title>rustix::imp::io::syscalls::mprotect (3,711 samples, 22.10%)</title><rect x="77.8836%" y="394" width="22.0985%" height="22" fill="rgb(88,110,117)" fg:x="13079" fg:w="3711"/><text x="78.1336%" y="409.00">rustix::imp::io::syscalls:..</text></g><g><title>rustix::imp::conv::ret (3,711 samples, 22.10%)</title><rect x="77.8836%" y="370" width="22.0985%" height="22" fill="rgb(88,110,117)" fg:x="13079" fg:w="3711"/><text x="78.1336%" y="385.00">rustix::imp::conv::ret</text></g><g><title>rustix::imp::io::error::try_decode_void (3,711 samples, 22.10%)</title><rect x="77.8836%" y="346" width="22.0985%" height="22" fill="rgb(88,110,117)" fg:x="13079" fg:w="3711"/><text x="78.1336%" y="361.00">rustix::imp::io::error::tr..</text></g><g><title>rustix::imp::reg::RetReg&lt;Num&gt;::is_nonzero (3,711 samples, 22.10%)</title><rect x="77.8836%" y="322" width="22.0985%" height="22" fill="rgb(88,110,117)" fg:x="13079" fg:w="3711"/><text x="78.1336%" y="337.00">rustix::imp::reg::RetReg&lt;N..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (3,711 samples, 22.10%)</title><rect x="77.8836%" y="298" width="22.0985%" height="22" fill="rgb(88,110,117)" fg:x="13079" fg:w="3711"/><text x="78.1336%" y="313.00">core::ptr::mut_ptr::&lt;impl ..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (3,711 samples, 22.10%)</title><rect x="77.8836%" y="274" width="22.0985%" height="22" fill="rgb(88,110,117)" fg:x="13079" fg:w="3711"/><text x="78.1336%" y="289.00">core::ptr::mut_ptr::&lt;impl ..</text></g><g><title>all (16,793 samples, 100%)</title><rect x="0.0000%" y="514" width="100.0000%" height="22" fill="rgb(88,110,117)" fg:x="0" fg:w="16793"/><text x="0.2500%" y="529.00"></text></g><g><title>mmap_benchmarks (16,793 samples, 100.00%)</title><rect x="0.0000%" y="490" width="100.0000%" height="22" fill="rgb(88,110,117)" fg:x="0" fg:w="16793"/><text x="0.2500%" y="505.00">mmap_benchmarks</text></g></svg></svg>